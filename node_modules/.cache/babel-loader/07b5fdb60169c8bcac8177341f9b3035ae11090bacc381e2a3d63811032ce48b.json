{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      adminname: '',\n      pswd: '',\n      email: '',\n      dialog: false,\n      // emailError: '',\n      // passwordError: '',\n      // nameError: '',\n      passwordFieldType: 'password',\n      nameRules: [value => !!value || 'Name is required.', value => /^[^\\s\\W]/.test(value) || 'Name should not start with a special character.', value => /^\\D+$/.test(value) || 'Name should not contain digits.', value => value?.length >= 3 || 'Name must contain at least 3 characters.', value => !/[^a-zA-Z\\s.]/g.test(value) || 'Name should not contain special characters'],\n      emailRules: [value => !!value || 'E-mail is required.', value => /.+@.+\\..+/.test(value) || 'E-mail must be valid.'],\n      passRules: [value => !!value || 'Password is required.', value => /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/.test(value) || 'Password must contain at least 8 characters, including uppercase, lowercase letters and a digit']\n    };\n  },\n  methods: {\n    togglePasswordVisibility() {\n      this.passwordFieldType = this.passwordFieldType === 'password' ? 'text' : 'password';\n    },\n    async register() {\n      console.log(\"clicked register\");\n      // Validation\n      // this.nameError = '';\n      // this.emailError = '';\n      // this.passwordError = '';\n      // if (!this.adminname || !this.email || !this.pswd) {\n      //   if (!this.adminname) this.nameError = 'Name is required';\n      //   if (!this.email) this.emailError = 'Email is required';\n      //   if (!this.pswd) this.passwordError = 'Password is required';\n      //   return;\n      // }\n\n      // Email validation\n      // const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      // if (!emailRegex.test(this.email)) {\n      //   this.emailError = 'Invalid email address';\n      //   return;\n      // }\n\n      // Password validation\n      // const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\n      // if (!passwordRegex.test(this.pswd)) {\n      //   this.passwordError = 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number';\n      //   return;\n      // }\n\n      const {\n        valid\n      } = await this.$refs.form.validate();\n      if (valid) {\n        try {\n          const response = await axios.post(`${this.$store.getters.getUrl}/admin/AdminReg`, {\n            \"adminName\": this.adminname,\n            \"password\": this.pswd,\n            \"email\": this.email,\n            \"role\": 'admin'\n          });\n          if (response.status === 200) {\n            this.dialog = true;\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","adminname","pswd","email","dialog","passwordFieldType","nameRules","value","test","length","emailRules","passRules","methods","togglePasswordVisibility","register","console","log","valid","$refs","form","validate","response","post","$store","getters","getUrl","status","error"],"sources":["C:\\Users\\LENOVO\\Documents\\practice\\siya\\newlibrary-main\\newlibrary-main\\src\\components\\AdminRegister.vue"],"sourcesContent":["<template>\r\n  <v-main>\r\n      <v-container justify-center>\r\n          <section class=\"\">\r\n<div class=\"container-fluid mt-5 pt-5\">\r\n  <div class=\"row d-flex justify-content-start align-items-center\">\r\n    <div class=\"col-md-9 col-lg-6 col-xl-5\">\r\n      <v-img src=\"../assets/Login book.png\"\r\n        class=\"img-fluid\"></v-img>\r\n    </div>\r\n    <div class=\"col-md-8 col-lg-6 col-xl-4 offset-xl-1\">\r\n      <form ref=\"form\" @submit.prevent=\"register\">\r\n        <!-- Name input -->\r\n        <div data-mdb-input-init class=\"form-outline mb-4\">\r\n            <v-text-field label=\"Enter Your Usrname\" v-model=\"adminname\" variant=\"solo\" class=\"custom-text-field\" :rules=\"nameRules\"></v-text-field>\r\n            <!-- <p v-if=\"nameError\" class=\"error-message mt-0 py-1\">{{ nameError }}</p> -->\r\n        </div>\r\n        <!-- Email input -->\r\n        <div data-mdb-input-init class=\"form-outline mb-4\">\r\n            <v-text-field label=\"Enter Your Email\" v-model=\"email\" variant=\"solo\" class=\"custom-text-field\" :rules=\"emailRules\"></v-text-field>\r\n            <!-- <p v-if=\"emailError\" class=\"error-message mt-0 py-1\">{{ emailError }}</p> -->\r\n        </div>\r\n        <!-- Password input -->\r\n        <div data-mdb-input-init class=\"form-outline mb-3\">\r\n          <v-text-field label=\"Enter your Password\" v-model=\"pswd\" variant=\"solo\" class=\"custom-text-field\"></v-text-field>\r\n          <!-- <p v-if=\"passwordError\" class=\"error-message mt-0 py-1\">{{ passwordError }}</p> -->\r\n        </div>\r\n\r\n        <div class=\"text-center text-lg-start mt-4 pt-2\">\r\n          <v-btn type=\"submit\"\r\n            style=\" background-color: #007bff; color: white;\">Register</v-btn>\r\n          <p class=\"small fw-bold mt-2 pt-1 mb-0\">Already have an account? <router-link to=\"/login\"\r\n              >Register</router-link></p>\r\n        </div>\r\n\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n</section>\r\n      </v-container>\r\n  </v-main>\r\n</template>\r\n\r\n<script>\r\n  import axios from 'axios';\r\n  export default {\r\n    data() {\r\n      return {\r\n        adminname: '',\r\n        pswd: '',\r\n        email: '',\r\n        dialog: false,\r\n        // emailError: '',\r\n        // passwordError: '',\r\n        // nameError: '',\r\n        passwordFieldType: 'password',\r\n        nameRules: [\r\n      value => !!value || 'Name is required.',\r\n      value => /^[^\\s\\W]/.test(value) || 'Name should not start with a special character.',\r\n      value => /^\\D+$/.test(value) || 'Name should not contain digits.',\r\n      value => (value?.length >= 3) || 'Name must contain at least 3 characters.',\r\n      value => !/[^a-zA-Z\\s.]/g.test(value) || 'Name should not contain special characters',\r\n    ],\r\n    emailRules: [\r\n      value => !!value || 'E-mail is required.',\r\n      value => /.+@.+\\..+/.test(value) || 'E-mail must be valid.',\r\n    ],\r\n    passRules: [\r\n    value => !!value || 'Password is required.',\r\n      value => /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/.test(value) ||  'Password must contain at least 8 characters, including uppercase, lowercase letters and a digit',\r\n\r\n    ],\r\n      }\r\n    },\r\n    methods: {\r\n      togglePasswordVisibility() {\r\n        this.passwordFieldType = this.passwordFieldType === 'password' ? 'text' : 'password';\r\n      },\r\n      async register() {\r\n        console.log(\"clicked register\");\r\n        // Validation\r\n        // this.nameError = '';\r\n        // this.emailError = '';\r\n        // this.passwordError = '';\r\n        // if (!this.adminname || !this.email || !this.pswd) {\r\n        //   if (!this.adminname) this.nameError = 'Name is required';\r\n        //   if (!this.email) this.emailError = 'Email is required';\r\n        //   if (!this.pswd) this.passwordError = 'Password is required';\r\n        //   return;\r\n        // }\r\n  \r\n        // Email validation\r\n        // const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        // if (!emailRegex.test(this.email)) {\r\n        //   this.emailError = 'Invalid email address';\r\n        //   return;\r\n        // }\r\n  \r\n        // Password validation\r\n        // const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\r\n        // if (!passwordRegex.test(this.pswd)) {\r\n        //   this.passwordError = 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number';\r\n        //   return;\r\n        // }\r\n        \r\n        const { valid } = await this.$refs.form.validate();\r\n        if (valid) {\r\n        try {\r\n          const response = await axios.post(`${this.$store.getters.getUrl}/admin/AdminReg`, {\r\n            \"adminName\": this.adminname,\r\n            \"password\": this.pswd,\r\n            \"email\": this.email,\r\n            \"role\": 'admin'\r\n          });\r\n          if (response.status === 200) {\r\n            this.dialog = true; \r\n          }\r\n        } catch (error) {\r\n          console.error(error)\r\n        }\r\n      }\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n\r\n<style scoped>\r\n:deep(.v-input__control ) {\r\nbackground-color: white; /* Set the input text color to white */\r\n}\r\n</style>"],"mappings":"AA6CE,OAAOA,KAAI,MAAO,OAAO;AACzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,KAAK;MACb;MACA;MACA;MACAC,iBAAiB,EAAE,UAAU;MAC7BC,SAAS,EAAE,CACbC,KAAI,IAAK,CAAC,CAACA,KAAI,IAAK,mBAAmB,EACvCA,KAAI,IAAK,UAAU,CAACC,IAAI,CAACD,KAAK,KAAK,iDAAiD,EACpFA,KAAI,IAAK,OAAO,CAACC,IAAI,CAACD,KAAK,KAAK,iCAAiC,EACjEA,KAAI,IAAMA,KAAK,EAAEE,MAAK,IAAK,CAAC,IAAK,0CAA0C,EAC3EF,KAAI,IAAK,CAAC,eAAe,CAACC,IAAI,CAACD,KAAK,KAAK,4CAA4C,CACtF;MACDG,UAAU,EAAE,CACVH,KAAI,IAAK,CAAC,CAACA,KAAI,IAAK,qBAAqB,EACzCA,KAAI,IAAK,WAAW,CAACC,IAAI,CAACD,KAAK,KAAK,uBAAuB,CAC5D;MACDI,SAAS,EAAE,CACXJ,KAAI,IAAK,CAAC,CAACA,KAAI,IAAK,uBAAuB,EACzCA,KAAI,IAAK,gDAAgD,CAACC,IAAI,CAACD,KAAK,KAAM,iGAAiG;IAG3K;EACF,CAAC;EACDK,OAAO,EAAE;IACPC,wBAAwBA,CAAA,EAAG;MACzB,IAAI,CAACR,iBAAgB,GAAI,IAAI,CAACA,iBAAgB,KAAM,UAAS,GAAI,MAAK,GAAI,UAAU;IACtF,CAAC;IACD,MAAMS,QAAQA,CAAA,EAAG;MACfC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;;MAEA,MAAM;QAAEC;MAAM,IAAI,MAAM,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC;MAClD,IAAIH,KAAK,EAAE;QACX,IAAI;UACF,MAAMI,QAAO,GAAI,MAAMtB,KAAK,CAACuB,IAAI,CAAE,GAAE,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,MAAO,iBAAgB,EAAE;YAChF,WAAW,EAAE,IAAI,CAACxB,SAAS;YAC3B,UAAU,EAAE,IAAI,CAACC,IAAI;YACrB,OAAO,EAAE,IAAI,CAACC,KAAK;YACnB,MAAM,EAAE;UACV,CAAC,CAAC;UACF,IAAIkB,QAAQ,CAACK,MAAK,KAAM,GAAG,EAAE;YAC3B,IAAI,CAACtB,MAAK,GAAI,IAAI;UACpB;QACF,EAAE,OAAOuB,KAAK,EAAE;UACdZ,OAAO,CAACY,KAAK,CAACA,KAAK;QACrB;MACF;IACA;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}