{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      adminname: '',\n      pswd: '',\n      email: '',\n      dialog: false,\n      emailError: '',\n      passwordError: '',\n      nameError: '',\n      passwordFieldType: 'password'\n    };\n  },\n  methods: {\n    togglePasswordVisibility() {\n      this.passwordFieldType = this.passwordFieldType === 'password' ? 'text' : 'password';\n    },\n    async register() {\n      console.log(\"clicked register\");\n      // Validation\n      this.nameError = '';\n      this.emailError = '';\n      this.passwordError = '';\n      if (!this.adminname || !this.email || !this.pswd) {\n        if (!this.adminname) this.nameError = 'Name is required';\n        if (!this.email) this.emailError = 'Email is required';\n        if (!this.pswd) this.passwordError = 'Password is required';\n        return;\n      }\n\n      // Email validation\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(this.email)) {\n        this.emailError = 'Invalid email address';\n        return;\n      }\n\n      // Password validation\n      const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\n      if (!passwordRegex.test(this.pswd)) {\n        this.passwordError = 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number';\n        return;\n      }\n      try {\n        this.emailError = '';\n        this.passwordError = '';\n        const response = await axios.post(`${this.$store.getters.getUrl}/admin/AdminReg`, {\n          \"adminName\": this.adminname,\n          \"password\": this.pswd,\n          \"email\": this.email,\n          \"role\": 'admin'\n        });\n        if (response.status === 200) {\n          this.dialog = true;\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","adminname","pswd","email","dialog","emailError","passwordError","nameError","passwordFieldType","methods","togglePasswordVisibility","register","console","log","emailRegex","test","passwordRegex","response","post","$store","getters","getUrl","status","error"],"sources":["C:\\Users\\LENOVO\\Documents\\practice\\siya\\newlibrary-main\\newlibrary-main\\src\\components\\AdminRegister.vue"],"sourcesContent":["<template>\r\n  <v-main>\r\n      <v-container justify-center>\r\n          <section class=\"\">\r\n<div class=\"container-fluid mt-5 pt-5\">\r\n  <div class=\"row d-flex justify-content-start align-items-center\">\r\n    <div class=\"col-md-9 col-lg-6 col-xl-5\">\r\n      <v-img src=\"../assets/Login book.png\"\r\n        class=\"img-fluid\"></v-img>\r\n    </div>\r\n    <div class=\"col-md-8 col-lg-6 col-xl-4 offset-xl-1\">\r\n      <form @submit.prevent=\"register\">\r\n        <!-- Name input -->\r\n        <div data-mdb-input-init class=\"form-outline mb-4\">\r\n            <v-text-field label=\"Enter Your Usrname\" v-model=\"adminname\" variant=\"solo\" class=\"custom-text-field\"></v-text-field>\r\n            <p v-if=\"nameError\" class=\"error-message\">{{ nameError }}</p>\r\n        </div>\r\n        <!-- Email input -->\r\n        <div data-mdb-input-init class=\"form-outline mb-4\">\r\n            <v-text-field label=\"Enter Your Email\" v-model=\"email\" variant=\"solo\" class=\"custom-text-field\"></v-text-field>\r\n            <p v-if=\"emailError\" class=\"error-message\">{{ emailError }}</p>\r\n        </div>\r\n        <!-- Password input -->\r\n        <div data-mdb-input-init class=\"form-outline mb-3\">\r\n          <v-text-field label=\"Enter your Password\" v-model=\"pswd\" variant=\"solo\" class=\"custom-text-field\"></v-text-field>\r\n          <p v-if=\"passwordError\" class=\"error-message\">{{ passwordError }}</p>\r\n        </div>\r\n\r\n        <div class=\"text-center text-lg-start mt-4 pt-2\">\r\n          <v-btn type=\"submit\"\r\n            style=\" background-color: #007bff; color: white;\">Register</v-btn>\r\n          <p class=\"small fw-bold mt-2 pt-1 mb-0\">Already have an account? <router-link to=\"/login\"\r\n              >Register</router-link></p>\r\n        </div>\r\n\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n</section>\r\n      </v-container>\r\n  </v-main>\r\n</template>\r\n\r\n<script>\r\n  import axios from 'axios';\r\n  export default {\r\n    data() {\r\n      return {\r\n        adminname: '',\r\n        pswd: '',\r\n        email: '',\r\n        dialog: false,\r\n        emailError: '',\r\n        passwordError: '',\r\n        nameError: '',\r\n        passwordFieldType: 'password'\r\n      }\r\n    },\r\n    methods: {\r\n      togglePasswordVisibility() {\r\n        this.passwordFieldType = this.passwordFieldType === 'password' ? 'text' : 'password';\r\n      },\r\n      async register() {\r\n        console.log(\"clicked register\");\r\n        // Validation\r\n        this.nameError = '';\r\n        this.emailError = '';\r\n        this.passwordError = '';\r\n        if (!this.adminname || !this.email || !this.pswd) {\r\n          if (!this.adminname) this.nameError = 'Name is required';\r\n          if (!this.email) this.emailError = 'Email is required';\r\n          if (!this.pswd) this.passwordError = 'Password is required';\r\n          return;\r\n        }\r\n  \r\n        // Email validation\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        if (!emailRegex.test(this.email)) {\r\n          this.emailError = 'Invalid email address';\r\n          return;\r\n        }\r\n  \r\n        // Password validation\r\n        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\r\n        if (!passwordRegex.test(this.pswd)) {\r\n          this.passwordError = 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number';\r\n          return;\r\n        }\r\n        \r\n        try {\r\n          this.emailError = '';\r\n          this.passwordError = '';\r\n          const response = await axios.post(`${this.$store.getters.getUrl}/admin/AdminReg`, {\r\n            \"adminName\": this.adminname,\r\n            \"password\": this.pswd,\r\n            \"email\": this.email,\r\n            \"role\": 'admin'\r\n          });\r\n          if (response.status === 200) {\r\n            this.dialog = true; \r\n          }\r\n        } catch (error) {\r\n          console.error(error)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n\r\n<style scoped>\r\n:deep(.v-input__control ) {\r\nbackground-color: white; /* Set the input text color to white */\r\n}\r\n</style>"],"mappings":"AA6CE,OAAOA,KAAI,MAAO,OAAO;AACzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,KAAK;MACbC,UAAU,EAAE,EAAE;MACdC,aAAa,EAAE,EAAE;MACjBC,SAAS,EAAE,EAAE;MACbC,iBAAiB,EAAE;IACrB;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,wBAAwBA,CAAA,EAAG;MACzB,IAAI,CAACF,iBAAgB,GAAI,IAAI,CAACA,iBAAgB,KAAM,UAAS,GAAI,MAAK,GAAI,UAAU;IACtF,CAAC;IACD,MAAMG,QAAQA,CAAA,EAAG;MACfC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/B;MACA,IAAI,CAACN,SAAQ,GAAI,EAAE;MACnB,IAAI,CAACF,UAAS,GAAI,EAAE;MACpB,IAAI,CAACC,aAAY,GAAI,EAAE;MACvB,IAAI,CAAC,IAAI,CAACL,SAAQ,IAAK,CAAC,IAAI,CAACE,KAAI,IAAK,CAAC,IAAI,CAACD,IAAI,EAAE;QAChD,IAAI,CAAC,IAAI,CAACD,SAAS,EAAE,IAAI,CAACM,SAAQ,GAAI,kBAAkB;QACxD,IAAI,CAAC,IAAI,CAACJ,KAAK,EAAE,IAAI,CAACE,UAAS,GAAI,mBAAmB;QACtD,IAAI,CAAC,IAAI,CAACH,IAAI,EAAE,IAAI,CAACI,aAAY,GAAI,sBAAsB;QAC3D;MACF;;MAEA;MACA,MAAMQ,UAAS,GAAI,4BAA4B;MAC/C,IAAI,CAACA,UAAU,CAACC,IAAI,CAAC,IAAI,CAACZ,KAAK,CAAC,EAAE;QAChC,IAAI,CAACE,UAAS,GAAI,uBAAuB;QACzC;MACF;;MAEA;MACA,MAAMW,aAAY,GAAI,gDAAgD;MACtE,IAAI,CAACA,aAAa,CAACD,IAAI,CAAC,IAAI,CAACb,IAAI,CAAC,EAAE;QAClC,IAAI,CAACI,aAAY,GAAI,6HAA6H;QAClJ;MACF;MAEA,IAAI;QACF,IAAI,CAACD,UAAS,GAAI,EAAE;QACpB,IAAI,CAACC,aAAY,GAAI,EAAE;QACvB,MAAMW,QAAO,GAAI,MAAMlB,KAAK,CAACmB,IAAI,CAAE,GAAE,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,MAAO,iBAAgB,EAAE;UAChF,WAAW,EAAE,IAAI,CAACpB,SAAS;UAC3B,UAAU,EAAE,IAAI,CAACC,IAAI;UACrB,OAAO,EAAE,IAAI,CAACC,KAAK;UACnB,MAAM,EAAE;QACV,CAAC,CAAC;QACF,IAAIc,QAAQ,CAACK,MAAK,KAAM,GAAG,EAAE;UAC3B,IAAI,CAAClB,MAAK,GAAI,IAAI;QACpB;MACF,EAAE,OAAOmB,KAAK,EAAE;QACdX,OAAO,CAACW,KAAK,CAACA,KAAK;MACrB;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}