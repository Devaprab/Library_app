{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      adminname: '',\n      pswd: '',\n      email: '',\n      dialog: false,\n      emailError: '',\n      passwordError: '',\n      nameError: ''\n    };\n  },\n  methods: {\n    async register() {\n      // Validation\n      console.log(\"entered\");\n      this.nameError = '';\n      this.emailError = '';\n      this.passwordError = '';\n      if (!this.email || !this.pswd || !this.nameError) {\n        if (!this.adminname) this.nameError = 'Name is required';\n        if (!this.email) this.emailError = 'Email is required';\n        if (!this.pswd) this.passwordError = 'Password is required';\n        return;\n      }\n\n      // Email validation\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(this.email)) {\n        this.emailError = 'Invalid email address';\n        return;\n      }\n\n      // Password validation\n      const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\n      if (!passwordRegex.test(this.pswd)) {\n        this.passwordError = 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number';\n        return;\n      }\n      try {\n        this.emailError = '';\n        this.passwordError = '';\n        const response = await axios.post(`${this.$store.getters.getUrl}/admin/AdminReg`, {\n          \"adminName\": this.adminname,\n          \"password\": this.pswd,\n          \"email\": this.email,\n          \"role\": 'admin'\n        });\n        if (response.status === 200) {\n          console.log(response.data);\n          this.dialog = true;\n          // alert('Successfully registered')\n          // this.$router.push('/adminpage');\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","adminname","pswd","email","dialog","emailError","passwordError","nameError","methods","register","console","log","emailRegex","test","passwordRegex","response","post","$store","getters","getUrl","status","error"],"sources":["C:\\Users\\LENOVO\\Documents\\practice\\siya\\newlibrary-main\\newlibrary-main\\src\\components\\AdminRegister.vue"],"sourcesContent":["<template>\r\n    <div class=\"mb-4 pb-2 mt-5\">\r\n      <form class=\"form-signin  pb-4\" @submit.prevent=\" register\">\r\n        <h1 class=\"h3 mb-3 font-weight-normal mt-5\">Please Sign Up</h1>\r\n        <label for=\"inputuser\" class=\"sr-only\">User Name</label>\r\n        <input type=\"text\" id=\"inputuser\" class=\"form-control\" placeholder=\"User Name\" v-model=\"adminname\">\r\n        <p v-if=\"nameError\" class=\"error-message\">{{ nameError }}</p>\r\n        <label for=\"inputuser\" class=\"sr-only\">Email</label>\r\n        <input type=\"email\" id=\"inputemail\" class=\"form-control\" placeholder=\"Email\" v-model=\"email\">\r\n        <p v-if=\"emailError\" class=\"error-message\">{{ emailError }}</p>\r\n        <label for=\"inputPassword\" class=\"sr-only\">Password</label>\r\n        <input type=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"Password\" v-model=\"pswd\">\r\n        <p v-if=\"passwordError\" class=\"error-message\">{{ passwordError }}</p>\r\n        <div class=\"checkbox mb-3\">\r\n        </div>\r\n        <button class=\"btn btn-lg buttonstyle btn-block text-white\" type=\"submit\">Sign Up</button>\r\n        <p class=\"mt-3 ms-5 ps-3\">Already a user?<router-link to=\"/login\">Login</router-link></p>\r\n        <v-dialog v-model=\"dialog\" width=\"400px\">\r\n<v-card class=\"mx-auto rounded-5\" elevation=\"2\" max-width=\"400\" width=\"100%\" height=\"250\">\r\n    <v-card-title class=\"green-header mx-auto\"><v-icon\r\n      class=\"mb-2 mt-4\"\r\n      color=\"success\"\r\n      icon=\"mdi-check-circle\"\r\n      size=\"100\"\r\n    ></v-icon></v-card-title>\r\n    <v-card-text class=\"text-success text-center\"><h2>Successfully Added</h2>\r\n    <p>Please Login</p></v-card-text>\r\n</v-card>\r\n    \r\n</v-dialog>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  <script>\r\nimport axios from 'axios';\r\n  export default {\r\n    data() {\r\n      return {\r\n        adminname: '',\r\n        pswd: '',\r\n        email: '',\r\n        dialog: false,\r\n        emailError: '',\r\n        passwordError: '',\r\n        nameError: '',\r\n      }\r\n    },\r\n    methods: {\r\n      async register() {\r\n        // Validation\r\n        console.log(\"entered\");\r\n        this.nameError = '';\r\n        this.emailError = '';\r\n      this.passwordError = '';\r\n      if (!this.email || !this.pswd || !this.nameError) {\r\n        if (!this.adminname) this.nameError = 'Name is required';\r\n        if (!this.email) this.emailError = 'Email is required';\r\n        if (!this.pswd) this.passwordError = 'Password is required';\r\n        return;\r\n      }\r\n\r\n      // Email validation\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (!emailRegex.test(this.email)) {\r\n        this.emailError = 'Invalid email address';\r\n        return;\r\n      }\r\n\r\n      // Password validation\r\n      const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\r\n      if (!passwordRegex.test(this.pswd)) {\r\n        this.passwordError = 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number';\r\n        return;\r\n      }\r\n      try{\r\n        this.emailError = '';\r\n        this.passwordError = '';\r\n        const response = await axios.post(`${this.$store.getters.getUrl}/admin/AdminReg`,{\r\n          \"adminName\": this.adminname,\r\n          \"password\": this.pswd,\r\n          \"email\": this.email,\r\n          \"role\": 'admin'\r\n        });\r\n        if(response.status === 200) {\r\n          console.log(response.data)\r\n          this.dialog =true; \r\n        // alert('Successfully registered')\r\n        // this.$router.push('/adminpage');\r\n        }\r\n      }\r\n      catch(error){\r\n        console.error(error)\r\n      }\r\n  }\r\n    }\r\n}\r\n</script>\r\n\r\n\r\n\r\n<style scoped>\r\n.buttonstyle {\r\n  background-color: #303b1b;\r\n}\r\n\r\nform.form-signin {\r\n    border-radius: 10px;\r\n    padding-left: 50px;\r\n    padding-right: 50px;\r\n    background-color: white;\r\n    padding-top: 10px;\r\n}\r\n.error-message {\r\n  color: red;\r\n  font-size: 14px;\r\n}\r\n</style>"],"mappings":"AAkCA,OAAOA,KAAI,MAAO,OAAO;AACvB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,KAAK;MACbC,UAAU,EAAE,EAAE;MACdC,aAAa,EAAE,EAAE;MACjBC,SAAS,EAAE;IACb;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,QAAQA,CAAA,EAAG;MACf;MACAC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MACtB,IAAI,CAACJ,SAAQ,GAAI,EAAE;MACnB,IAAI,CAACF,UAAS,GAAI,EAAE;MACtB,IAAI,CAACC,aAAY,GAAI,EAAE;MACvB,IAAI,CAAC,IAAI,CAACH,KAAI,IAAK,CAAC,IAAI,CAACD,IAAG,IAAK,CAAC,IAAI,CAACK,SAAS,EAAE;QAChD,IAAI,CAAC,IAAI,CAACN,SAAS,EAAE,IAAI,CAACM,SAAQ,GAAI,kBAAkB;QACxD,IAAI,CAAC,IAAI,CAACJ,KAAK,EAAE,IAAI,CAACE,UAAS,GAAI,mBAAmB;QACtD,IAAI,CAAC,IAAI,CAACH,IAAI,EAAE,IAAI,CAACI,aAAY,GAAI,sBAAsB;QAC3D;MACF;;MAEA;MACA,MAAMM,UAAS,GAAI,4BAA4B;MAC/C,IAAI,CAACA,UAAU,CAACC,IAAI,CAAC,IAAI,CAACV,KAAK,CAAC,EAAE;QAChC,IAAI,CAACE,UAAS,GAAI,uBAAuB;QACzC;MACF;;MAEA;MACA,MAAMS,aAAY,GAAI,gDAAgD;MACtE,IAAI,CAACA,aAAa,CAACD,IAAI,CAAC,IAAI,CAACX,IAAI,CAAC,EAAE;QAClC,IAAI,CAACI,aAAY,GAAI,6HAA6H;QAClJ;MACF;MACA,IAAG;QACD,IAAI,CAACD,UAAS,GAAI,EAAE;QACpB,IAAI,CAACC,aAAY,GAAI,EAAE;QACvB,MAAMS,QAAO,GAAI,MAAMhB,KAAK,CAACiB,IAAI,CAAE,GAAE,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,MAAO,iBAAgB,EAAC;UAC/E,WAAW,EAAE,IAAI,CAAClB,SAAS;UAC3B,UAAU,EAAE,IAAI,CAACC,IAAI;UACrB,OAAO,EAAE,IAAI,CAACC,KAAK;UACnB,MAAM,EAAE;QACV,CAAC,CAAC;QACF,IAAGY,QAAQ,CAACK,MAAK,KAAM,GAAG,EAAE;UAC1BV,OAAO,CAACC,GAAG,CAACI,QAAQ,CAACf,IAAI;UACzB,IAAI,CAACI,MAAK,GAAG,IAAI;UACnB;UACA;QACA;MACF,EACA,OAAMiB,KAAK,EAAC;QACVX,OAAO,CAACW,KAAK,CAACA,KAAK;MACrB;IACJ;EACE;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}